import { Type } from 'codeco';
export declare const JsonAsString: Type<unknown, string, string>;
export declare const AggregationDocument: import("codeco").TypeCodec<{
    resumeToken: import("codeco").TrivialCodec<string>;
    commitId: Type<import("streamid/lib/commit-id.js").CommitID, string, string>;
    content: Type<unknown, string, string>;
    metadata: import("codeco").SparseCodec<{
        controllers: import("codeco").Codec<string[], string[], unknown> & {
            item: import("codeco").TrivialCodec<string>;
        };
        model: import("codeco").OptionalCodec<Type<import("streamid/lib/stream-id.js").StreamID, string, string>>;
        context: import("codeco").OptionalCodec<Type<import("streamid/lib/stream-id.js").StreamID, string, string>>;
        family: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
        schema: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
        tags: import("codeco").OptionalCodec<import("codeco").Codec<string[], string[], unknown> & {
            item: import("codeco").TrivialCodec<string>;
        }>;
        forbidControllerChange: import("codeco").OptionalCodec<import("codeco").TrivialCodec<boolean>>;
    }>;
    eventType: Type<import("common/lib/stream.js").EventType, import("common/lib/stream.js").EventType, unknown>;
}>;
//# sourceMappingURL=feed.d.ts.map