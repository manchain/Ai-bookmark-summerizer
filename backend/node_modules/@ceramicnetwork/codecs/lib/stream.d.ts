import { CommitID, StreamID } from '@ceramicnetwork/streamid';
import { EventType } from '@ceramicnetwork/common';
import { Type } from 'codeco';
export declare function isStreamIdString(input: string): input is string;
export declare const streamIdString: import("codeco").RefinementCodec<import("codeco").TrivialCodec<string>, string>;
export declare const streamIdAsString: Type<StreamID, string, string>;
export declare const streamIdAsBytes: Type<StreamID, Uint8Array, Uint8Array>;
export declare const commitIdAsString: Type<CommitID, string, string>;
export declare const StreamMetadata: import("codeco").SparseCodec<{
    controllers: import("codeco").Codec<string[], string[], unknown> & {
        item: import("codeco").TrivialCodec<string>;
    };
    model: import("codeco").OptionalCodec<Type<StreamID, string, string>>;
    context: import("codeco").OptionalCodec<Type<StreamID, string, string>>;
    family: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
    schema: import("codeco").OptionalCodec<import("codeco").TrivialCodec<string>>;
    tags: import("codeco").OptionalCodec<import("codeco").Codec<string[], string[], unknown> & {
        item: import("codeco").TrivialCodec<string>;
    }>;
    forbidControllerChange: import("codeco").OptionalCodec<import("codeco").TrivialCodec<boolean>>;
}>;
export declare const EventTypeAsNumber: Type<EventType, EventType, unknown>;
//# sourceMappingURL=stream.d.ts.map