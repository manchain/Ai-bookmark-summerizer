import type { PublishOpts } from './streamopts.js';
import type { StreamID } from '@ceramicnetwork/streamid';
import { NodeStatusResponse } from './node-status-interface.js';
import { StreamReader } from './stream-reader.js';
import { StreamWriter } from './stream-writer.js';
export declare type Field = {
    path: Array<string>;
};
export declare type FieldsIndex = {
    fields: Array<Field>;
};
export declare type ModelData = {
    streamID: StreamID;
    indices?: Array<FieldsIndex>;
};
export interface PinApi {
    add(streamId: StreamID, force?: boolean): Promise<void>;
    rm(streamId: StreamID, opts?: PublishOpts): Promise<void>;
    ls(streamId?: StreamID): Promise<AsyncIterable<string>>;
}
export type { DIDProvider } from 'dids';
export declare function convertModelIdsToModelData(modelIds: Array<StreamID>): Array<ModelData>;
export interface AdminApi {
    nodeStatus(): Promise<NodeStatusResponse>;
    getIndexedModels(): Promise<Array<StreamID>>;
    getIndexedModelData(): Promise<Array<ModelData>>;
    startIndexingModels(modelsIDs: Array<StreamID>): Promise<void>;
    startIndexingModelData(modelData: Array<ModelData>): Promise<void>;
    stopIndexingModels(modelsIDs: Array<StreamID>): Promise<void>;
    stopIndexingModelData(modelData: Array<ModelData>): Promise<void>;
    pin: PinApi;
}
export interface StreamReaderWriter extends StreamReader, StreamWriter {
}
//# sourceMappingURL=ceramic-api.d.ts.map