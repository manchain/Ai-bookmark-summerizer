import { CreateJWSOptions, DagJWS, DagJWSResult, DID, VerifyJWSOptions, VerifyJWSResult } from 'dids';
export { CreateJWSOptions, DagJWS, DagJWSResult, DIDResolutionResult, VerifyJWSOptions, VerifyJWSResult, } from 'dids';
export interface UnderlyingCeramicSigner {
    ensureAuthenticated(): Promise<void>;
    createJWS<T extends string | Record<string, any>>(payload: T, options?: CreateJWSOptions): Promise<DagJWS>;
    createDagJWS(payload: Record<string, any>, options?: CreateJWSOptions): Promise<DagJWSResult>;
    verifyJWS(jws: string | DagJWS, options?: VerifyJWSOptions): Promise<VerifyJWSResult>;
    asController(): Promise<string>;
}
export interface IntoSigner {
    signer: CeramicSigner;
}
export declare class CeramicSigner implements IntoSigner {
    private isAuthenticated;
    private reqs?;
    constructor(reqs?: UnderlyingCeramicSigner);
    get signer(): CeramicSigner;
    static invalid(): CeramicSigner;
    static fromDID(did: DID): CeramicSigner;
    withDid(did: DID): void;
    private assertRequirements;
    createJWS<T extends string | Record<string, any>>(payload: T, options?: CreateJWSOptions): Promise<DagJWS>;
    createDagJWS(payload: Record<string, any>, options?: CreateJWSOptions): Promise<DagJWSResult>;
    asController(): Promise<string>;
    verifyJWS(jws: string | DagJWS, options?: VerifyJWSOptions): Promise<VerifyJWSResult>;
}
//# sourceMappingURL=ceramic-signer.d.ts.map